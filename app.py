import os
import json
import base64
import re
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from datetime import datetime
import pytz

load_dotenv()

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
GOOGLE_CREDENTIAL_BASE64 = os.getenv("GOOGLE_CREDENTIAL_BASE64")
SYSTEM_ACTIVE = os.getenv("SYSTEM_ACTIVE", "true").lower() == "true"

app = Flask(__name__)
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

cred_path = "google-credentials.json"
if GOOGLE_CREDENTIAL_BASE64:
    with open(cred_path, "w") as f:
        f.write(base64.b64decode(GOOGLE_CREDENTIAL_BASE64).decode("utf-8"))

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(cred_path, scope)
client = gspread.authorize(creds)

user_state = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    user_id = event.source.user_id

    if not SYSTEM_ACTIVE:
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ö†Ô∏è ‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß"))
        return

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    if text.lower() == "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        if user_id in user_state:
            del user_state[user_id]
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ùóÔ∏è‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà:\n\n1 ‚Üí ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n2 ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
        )
        return

    # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏Å‡πà‡∏≠‡∏ô
    if user_id not in user_state:
        if text == "1":
            user_state[user_id] = "register"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="üìã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î:\n‡∏ä‡∏∑‡πà‡∏≠:\n‡πÅ‡∏ú‡∏ô‡∏Å:\n‡∏™‡∏≤‡∏Ç‡∏≤:\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô (DD-MM-YYYY):\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            )
            return
        elif text == "2":
            user_state[user_id] = "transfer"
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="üîÅ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î:\n‡∏ä‡∏∑‡πà‡∏≠:\n‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°:\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà:\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà: ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏• (DD-MM-YYYY)")
            )
            return
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç:\n1 ‚Üí ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà\n2 ‚Üí ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
            )
            return

    mode = user_state.get(user_id)

    if mode == "register":
        lines = text.splitlines()
        if len(lines) != 6:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"))
            return

        keys = ["‡∏ä‡∏∑‡πà‡∏≠", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"]
        data = {}
        for line in lines:
            if ':' not in line:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ':'"))
                return
            key, val = line.split(':', 1)
            data[key.strip()] = val.strip()

        if not all(k in data for k in keys):
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            return

        emp_type = data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].lower()
        if emp_type == "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô":
            worksheet = client.open("HR_EmployeeList").worksheet("DailyEmployee")
            default_code = 90000
        elif emp_type == "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            worksheet = client.open("HR_EmployeeList").worksheet("MonthlyEmployee")
            default_code = 20000
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"))
            return

        existing = worksheet.get_all_values()
        last_row = existing[-1] if len(existing) > 1 else []
        last_code = int(last_row[7]) if len(last_row) >= 8 and last_row[7].isdigit() else default_code
        emp_code = str(last_code + 1)

        now = datetime.now(pytz.timezone('Asia/Bangkok')).strftime("%d/%m/%Y %H:%M")
        worksheet.append_row([
            data["‡∏ä‡∏∑‡πà‡∏≠"], data["‡πÅ‡∏ú‡∏ô‡∏Å"], data["‡∏™‡∏≤‡∏Ç‡∏≤"], data["‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"],
            data["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"], data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"], user_id, emp_code, now
        ])

        line_bot_api.reply_message(event.reply_token, TextSendMessage(
            text=f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: {emp_code}\nüìå ‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"))
        del user_state[user_id]

    elif mode == "transfer":
        lines = text.splitlines()
        if len(lines) != 5:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö"))
            return

        keys = ["‡∏ä‡∏∑‡πà‡∏≠", "‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•"]
        data = {}
        for line in lines:
            if ':' not in line:
                line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ':'"))
                return
            key, val = line.split(':', 1)
            data[key.strip()] = val.strip()

        if not all(k in data for k in keys):
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"))
            return

        new_type = data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà"].lower()
        if new_type == "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô":
            worksheet = client.open("HR_EmployeeList").worksheet("DailyEmployee")
            default_code = 90000
        elif new_type == "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            worksheet = client.open("HR_EmployeeList").worksheet("MonthlyEmployee")
            default_code = 20000
        else:
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text="‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"))
            return

        existing = worksheet.get_all_values()
        last_row = existing[-1] if len(existing) > 1 else []
        last_code = int(last_row[7]) if len(last_row) >= 8 and last_row[7].isdigit() else default_code
        new_code = str(last_code + 1)

        now = datetime.now(pytz.timezone('Asia/Bangkok')).strftime("%d/%m/%Y %H:%M")

        worksheet.append_row([
            data["‡∏ä‡∏∑‡πà‡∏≠"], "-", "-", data["‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡∏°‡πà"],
            data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•"], data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà"], user_id, new_code, now
        ])

        history_sheet = client.open("HR_EmployeeList").worksheet("TransferHistory")
        history_sheet.append_row([
            data["‡∏ä‡∏∑‡πà‡∏≠"], data["‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°"], new_code,
            data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà"], data["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•"], now
        ])

        line_bot_api.reply_message(event.reply_token, TextSendMessage(
            text=f"üîÑ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà: {new_code}\nüìå ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢"))
        del user_state[user_id]

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
