import os
import json
import base64
import re
from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from dotenv import load_dotenv
from datetime import datetime
import pytz

load_dotenv()

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
GOOGLE_CREDENTIAL_BASE64 = os.getenv("GOOGLE_CREDENTIAL_BASE64")

app = Flask(__name__)
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

cred_path = "google-credentials.json"
if GOOGLE_CREDENTIAL_BASE64:
    with open(cred_path, "w") as f:
        f.write(base64.b64decode(GOOGLE_CREDENTIAL_BASE64).decode("utf-8"))

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(cred_path, scope)
client = gspread.authorize(creds)

SYSTEM_ACTIVE = os.getenv("SYSTEM_ACTIVE", "true").lower() == "true"
user_states = {}  # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ

@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    if not SYSTEM_ACTIVE:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‚ö†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")
        )
        return

    text = event.message.text.strip()
    user_id = event.source.user_id

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    if text == "1":
        user_states[user_id] = "register"
        line_bot_api.reply_message(
    event.reply_token,
    TextSendMessage(text="üìÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î:\n‡∏ä‡∏∑‡πà‡∏≠:\n‡πÅ‡∏ú‡∏ô‡∏Å:\n‡∏™‡∏≤‡∏Ç‡∏≤:\n‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô (DD-MM-YYYY):\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:")
)
        
        return
    elif text == "2":
        user_states[user_id] = "change"
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="üîÑ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î:\n‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°:\n‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà:\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏• (DD-MM-YYYY):")
        )
        return

    state = user_states.get(user_id)

    if state == "register":
        lines = text.splitlines()
        if len(lines) != 6:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å 6 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
            )
            return

        data = {}
        for line in lines:
            if ":" not in line:
                line_bot_api.reply_message(
                    event.reply_token,
                    TextSendMessage(text="‚ùå ‡∏ó‡∏∏‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ':'")
                )
                return
            key, val = line.split(":", 1)
            data[key.strip()] = val.strip()

        required_keys = {"‡∏ä‡∏∑‡πà‡∏≠", "‡πÅ‡∏ú‡∏ô‡∏Å", "‡∏™‡∏≤‡∏Ç‡∏≤", "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á", "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô", "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"}
        if set(data.keys()) != required_keys:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")
            )
            return

        if not re.match(r'^\d{1,2}-\d{1,2}-\d{4}$', data["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"]):
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            )
            return

        emp_type = data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"].lower()
        if emp_type == "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô":
            sheet = client.open("HR_EmployeeList").worksheet("DailyEmployee")
            default_code = 90000
        elif emp_type == "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
            sheet = client.open("HR_EmployeeList").worksheet("MonthlyEmployee")
            default_code = 20000
        else:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            )
            return

        existing = sheet.get_all_values()
        last_row = existing[-1] if len(existing) > 1 else []
        last_code = int(last_row[7]) if len(last_row) >= 8 and last_row[7].isdigit() else default_code
        emp_code = str(last_code + 1)

        tz = pytz.timezone('Asia/Bangkok')
        now = datetime.now(tz).strftime("%d/%m/%Y %H:%M")

        sheet.append_row([
            data["‡∏ä‡∏∑‡πà‡∏≠"], data["‡πÅ‡∏ú‡∏ô‡∏Å"], data["‡∏™‡∏≤‡∏Ç‡∏≤"], data["‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á"],
            data["‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô"], data["‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"], user_id, emp_code, now
        ])

        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=f"‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n‡∏£‡∏´‡∏±‡∏™‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: {emp_code}")
        )
        user_states.pop(user_id, None)

    elif state == "change":
        lines = text.splitlines()
        if len(lines) != 3:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å 3 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
            )
            return

        emp_code_old, emp_type_new, effect_date = [line.split(":", 1)[1].strip() if ":" in line else "" for line in lines]

        if emp_type_new not in ["‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"]:
            line_bot_api.reply_message(
                event.reply_token,
                TextSendMessage(text="‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            )
            return

        sheet = client.open("HR_EmployeeList").worksheet("TransferHistory")
        tz = pytz.timezone('Asia/Bangkok')
        now = datetime.now(tz).strftime("%d/%m/%Y %H:%M")

        sheet.append_row([emp_code_old, emp_type_new, effect_date, user_id, now])
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        )
        user_states.pop(user_id, None)

    else:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô")
        )

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)
